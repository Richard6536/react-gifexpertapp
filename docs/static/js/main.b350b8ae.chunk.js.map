{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","InputGroup","className","Prepend","Text","id","icon","faSearch","FormControl","placeholder","type","value","onChange","target","GifGridItem","title","url","console","log","Card","style","width","Img","variant","src","alt","Body","Title","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","CardGroup","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qOAQaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,uBAAMC,SAXW,SAAEC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,UACI,mCAAMD,EAAN,OACA,eAACQ,EAAA,EAAD,CAAYC,UAAU,OAAtB,UACI,cAACD,EAAA,EAAWE,QAAZ,UACA,cAACF,EAAA,EAAWG,KAAZ,CAAiBC,GAAG,eAApB,SAAmC,cAAC,IAAD,CAAiBC,KAAMC,UAE1D,cAACC,EAAA,EAAD,CACAC,YAAY,eACZC,KAAK,OAAOC,MAAOlB,EAAYmB,SAvBjB,SAAEhB,GACxBF,EAAcE,EAAEiB,OAAOF,iB,gBCVlBG,EAAc,SAAC,GAAuB,EAArBT,GAAsB,IAAlBU,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAIrC,OAFAC,QAAQC,IAAIF,GAGR,eAACG,EAAA,EAAD,CAAMjB,UAAU,oCAAoCkB,MAAO,CAAEC,MAAO,SAApE,UACA,cAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAMR,EAAMS,IAAKV,IACzC,cAACI,EAAA,EAAKO,KAAN,UACI,cAACP,EAAA,EAAKQ,MAAN,UAAcZ,U,iCCVTa,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEnBb,QAAQC,IAAIW,GAENb,EAJa,iDAIoCe,UAAUF,GAJ9C,8DAKAG,MAAOhB,GALP,cAKbiB,EALa,gBAMEA,EAAKC,OANP,uBAMZC,EANY,EAMZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHjC,GAAIiC,EAAIjC,GACRU,MAAOuB,EAAIvB,MACXC,IAAG,UAAEsB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBxB,QAZvB,kBAgBZoB,GAhBY,4CAAH,sDCIXK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAc,IAAD,EAEbrC,mBAAS,CAC/B2C,KAAM,GACNO,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAkBvC,OAXAC,qBAAW,WAEPjB,EAASC,GAAWiB,MAAM,SAAAC,GACtBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAIlB,CAACb,IAEGc,EDb0BK,CAAcnB,GAAlCU,EAHwB,EAG7BJ,KAAaO,EAHgB,EAGhBA,QAErB,OACI,eAAC,WAAD,WACI,6BAAMb,IAEJa,GAAW,4CAEb,cAACO,EAAA,EAAD,UAEQV,EAAOF,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIjC,SAIzC,2BEnBC6C,EAAe,WAAM,MAGM1D,mBAAS,CAAC,UAHhB,mBAGvB2D,EAHuB,KAGX5D,EAHW,KAa9B,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ4D,EAAWd,KAAK,SAAAR,GACZ,OAAO,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,YCjB9CuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b350b8ae.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            //Recibo setCategories desde el componente GifExpertApp y agrego el valor del input al arreglo\r\n            setCategories(categorias => [inputValue, ...categorias]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <h1> {inputValue} </h1>\r\n            <InputGroup className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"basic-addon1\"><FontAwesomeIcon icon={faSearch} /></InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl\r\n                placeholder=\"Busca un GIF\"\r\n                type=\"text\" value={inputValue} onChange={ handleInputChange }\r\n                />\r\n            </InputGroup>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    console.log(url);\r\n\r\n    return (\r\n        <Card className=\"animate__animated animate__fadeIn\" style={{ width: '18rem' }}>\r\n        <Card.Img variant=\"top\" src={ url } alt={title} />\r\n        <Card.Body>\r\n            <Card.Title>{ title }</Card.Title>\r\n        </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n","\r\n    export const getGifs = async(category) => {\r\n\r\n        console.log(category);\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=nZy6UI9XQ6X0IhIH7PS0sjI22RXzCBnd`;\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n \r\n        return gifs;\r\n    }","import React, { Fragment } from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport CardGroup from 'react-bootstrap/CardGroup';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //data:images, sirve para renombrar data por images\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3>{ category }</h3>\r\n            \r\n            { loading && <p>Cargando...</p>}\r\n\r\n            <CardGroup>\r\n                {\r\n                    images.map( img => {\r\n                        return <GifGridItem key={img.id} {...img} />\r\n                    })\r\n                }\r\n            </CardGroup>\r\n            <hr/>\r\n        </Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../components/helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category ).then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n\r\n    }, [category]);\r\n\r\n    return state; //{data: [], loading: true}\r\n}","import React, { Fragment, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    //Si useState detecta un cambio, renderiza nuevamente la vista\r\n    const [categories, setCategories] = useState(['Mario'])\r\n\r\n    /*\r\n    const AgregarCategoria = () => {\r\n\r\n        //Agrego una nueva categoría al useState, lo cual detectará un cambio y renderizará nuevamente la vista.\r\n        const nuevaCategoria = 'Donkey Kong';\r\n        setCategories([nuevaCategoria, ...categories]);\r\n    };*/\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => {\r\n                        return <GifGrid key={ category } category={ category } />\r\n                    })\r\n                }\r\n            </ol>\r\n\r\n        </Fragment>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}